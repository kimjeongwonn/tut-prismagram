### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AutoPayload {
  approvedUser: User!
  token: String!
}

type Comment {
  id: Int!
  post: Post!
  postId: Int!
  text: String!
  user: User!
  userId: String!
}

input CommentWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FeedList {
  posts: [Post!]!
}

type File {
  id: Int!
  post: Post!
  postId: Int!
  url: String!
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Message {
  fromUserId: String!
  id: Int!
  roomId: Int!
  text: String!
  timeStamp: DateTime!
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  addComment(postId: Int!, text: String!): Comment!
  confirmSecret(email: String!, secret: String!): String!
  createAccount(bio: String, email: String!, firstName: String, lastName: String, username: String!): User!
  editUser(bio: String, firstName: String, lastName: String, username: String): User!
  followToggle(followId: String!): Boolean!
  modifyPost(action: PostAction!, caption: String, location: String, postId: Int!): Post
  requestSecret(email: String!): Boolean!
  SendMessage(roomId: Int, text: String!, toUserId: ID): Message!
  toggleLike(postId: Int!): Boolean!
  writePost(caption: String, location: String, url: [String!]!): Post!
}

type Post {
  caption: String
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int!, last: Int!): [Comment!]!
  commentsCount: Int!
  files: [File!]!
  id: Int!
  isLike: Boolean!
  likes(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int!, last: Int!): [User!]!
  likesCount: Int!
  location: String
  postAt: DateTime!
  user: User!
  userId: String!
}

enum PostAction {
  DELETE
  EDIT
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  allUsers: [User!]!
  searchPost(keyword: String!): [Post!]!
  searchUsers(keyword: String!): [User!]!
  seeFeed(cursor: Int): [Post!]!
  seeMessages(cursor: Int, roomId: Int!): [Message!]!
  seeMy: User!
  seeMyPosts: [Post!]!
  seeMyRooms: [Room!]!
  seePost(postId: Int!): Post!
  seeRoom(roomId: Int!): Room!
  seeUser(id: String!): User!
  seeUserPosts(userId: ID!): [Post!]!
}

type Room {
  id: Int!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int!, last: Int!): [Message!]!
  participant(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int!, last: Int!): [User!]!
}

input RoomWhereUniqueInput {
  id: Int
}

type User {
  bio: String
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int!, last: Int!): [Comment!]!
  email: String!
  firstName: String
  followers(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int!, last: Int!): [User!]!
  followersCount: Int!
  followings(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int!, last: Int!): [User!]!
  followingsCount: Int!
  fullName: String!
  id: String!
  isFollowing: Boolean!
  isSelf: Boolean!
  lastName: String
  likes(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int!, last: Int!): [Post!]!
  loginSecret: String
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int!, last: Int!): [Message!]!
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int!, last: Int!): [Post!]!
  postsCount: Int!
  rooms(after: RoomWhereUniqueInput, before: RoomWhereUniqueInput, first: Int!, last: Int!): [Room!]!
  username: String!
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}
